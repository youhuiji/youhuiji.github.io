<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建博客</title>
    <url>/2022/08/12/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基本操作</title>
    <url>/2022/08/13/redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="NoSQL："><a href="#NoSQL：" class="headerlink" title="NoSQL："></a>NoSQL：</h3><p>NoSQL 表示为“非关系SQL”，不支持多表查询，没有表和关系的概念，主要在内存中操作&lt;效率更高&gt;。</p>
<h3 id="Redis："><a href="#Redis：" class="headerlink" title="Redis："></a>Redis：</h3><p>redis 是一个免费开源的NoSQL产品，使用 ANSI C 语言编写，是一个 key-value 存储系统。支持的存储的 value包括&lt;string,hash,list,set,zset(sorted-set&#x3D;&#x3D;有序集合)&gt;。</p>
<p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中。</p>
<h3 id="1、Redis基本操作"><a href="#1、Redis基本操作" class="headerlink" title="1、Redis基本操作"></a>1、Redis基本操作</h3><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h4 id="启动支持中文的客户端"><a href="#启动支持中文的客户端" class="headerlink" title="启动支持中文的客户端"></a>启动支持中文的客户端</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">redis-cli <span class="attr">--raw</span></span><br></pre></td></tr></table></figure>

<h4 id="运行测试命令"><a href="#运行测试命令" class="headerlink" title="运行测试命令"></a>运行测试命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><ul>
<li><p>数据库本身没有名称，默认16个，通过0-15来标识，例如选中编号为1的数据库：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>redis在初始化时，默认选择0号数据库</p>
</li>
</ul>
<h4 id="redis键值对说明"><a href="#redis键值对说明" class="headerlink" title="redis键值对说明"></a>redis键值对说明</h4><ul>
<li>redis 是 key-value 的数据结构</li>
<li>每条数据都是一个键值对</li>
<li>键的类型是字符串</li>
<li>值的类型分为五种：字符串-string，哈希-hash，列表-list，无序集合-set，有序集合-zset</li>
</ul>
<h4 id="redis基本操作"><a href="#redis基本操作" class="headerlink" title="redis基本操作"></a>redis基本操作</h4><ul>
<li><p>如果设置的键不存在则为添加、如果已经存在则为修改</p>
</li>
<li><p>redis 中字符串可以使用单引号或者双引号，也可以省略引号</p>
</li>
<li><p>设置键值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置键值以及过期时间</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key senconds value </span><br></pre></td></tr></table></figure>
</li>
<li><p>设置多个键值对</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mset key1 vlaue1 key2 value2...........</span><br></pre></td></tr></table></figure>
</li>
<li><p>追加值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取单个值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="keyword">key</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取多个值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mget key1 key2 ............</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除键以及其对应值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del key1 key2 ..........</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="键命令"><a href="#键命令" class="headerlink" title="键命令"></a>键命令</h4><ol>
<li><p>查找键</p>
<ul>
<li><p>参数支持正则表达式，找到键，返回键名，找不到返回空</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">keys</span> pattern</span><br><span class="line">======================</span><br><span class="line">例如：</span><br><span class="line"><span class="number">1</span>.查找所有键  <span class="keyword">keys</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="number">2</span>.查找包含s的键  <span class="keyword">keys</span> <span class="string">&quot;*s*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p> 2.判断键是否存在</p>
 <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exists</span> key &lt;返回<span class="number">1</span>表示存在&gt;</span><br></pre></td></tr></table></figure>

<p> 3.查看键对应的 value 类型</p>
 <figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> key</span></span><br></pre></td></tr></table></figure>

<p> 4.设置键过期的单位</p>
<ul>
<li><p>以秒为单位</p>
</li>
<li><p>如果没有指定的国企时间则一直存在 直到通过del 移除</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 5.查看键有效时间</p>
<ul>
<li><p>以秒为单位</p>
<ul>
<li>返回大于0，代表有效时间，单位：秒</li>
<li>返回-1，表示永久有效</li>
<li>返回-2，表示键不存在</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">ttl <span class="keyword">key</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="2、哈希"><a href="#2、哈希" class="headerlink" title="2、哈希"></a>2、哈希</h3><h5 id="hash介绍"><a href="#hash介绍" class="headerlink" title="hash介绍"></a>hash介绍</h5><ul>
<li>hash用于存储“键值对”集合</li>
<li>hash中的值的类型为string</li>
<li>同一个哈希中字段名不可重复</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208132238348.png" alt="图片名称" style="zoom:80%;" />

<h5 id="增加、删除"><a href="#增加、删除" class="headerlink" title="增加、删除"></a>增加、删除</h5><ul>
<li><p>设置单个字段</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset key field value --- 其中&lt;field value&gt; 对应哈希表中的&lt;key value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置多个字段</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hmset <span class="keyword">key</span> filed1 value1 field2 value2 ......</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定键所有的字段</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hkeys <span class="keyword">key</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取一个字段的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hget <span class="keyword">key</span> field</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取多个字段的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hmget <span class="keyword">key</span> field1 field2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有字段的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hvals <span class="keyword">key</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有字段名包括字段对应的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hgetall <span class="keyword">key</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul>
<li><p>删除hash中的指定字段</p>
<ul>
<li>字段对应的值会一起被删除</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hdel <span class="keyword">key</span> field1 field2..........</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除整个hash键以及字段和值，使用del命令</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">del</span> key1 key2..........</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3、列表List"><a href="#3、列表List" class="headerlink" title="3、列表List"></a>3、列表List</h4><h5 id="list介绍"><a href="#list介绍" class="headerlink" title="list介绍"></a>list介绍</h5><ul>
<li>列表中的值类型为字符串</li>
<li>列表中的每个值按照添加顺序排序</li>
</ul>
<p><img src="https://raw.githubusercontent.com/youhuiji/images/master/202208132238207.png" alt="图片名称"></p>
<h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><ul>
<li><p>从左侧插入值&lt;头插&gt;</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">lpush <span class="keyword">key</span> value1 value2</span><br></pre></td></tr></table></figure>
</li>
<li><p>从右侧插入值&lt;尾插&gt;</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">rpush <span class="keyword">key</span> value1 value2</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定值的前或者后插入值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">linsert <span class="keyword">key</span> before/after value <span class="built_in">new</span>-value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul>
<li><p>返回列表中指定范围内的值</p>
<ul>
<li>索引从左侧开始，第一个值的索引为0</li>
<li>索引可以为负数，表示从尾部开始计数，如：-1表示最后一个值</li>
<li>start，stop为所要获取值的索引</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">lrange <span class="keyword">key</span> start <span class="keyword">stop</span> &lt;start <span class="keyword">stop</span>认为是闭包含的范围&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul>
<li><p>设置指定索引的值</p>
<ul>
<li>索引从左侧开始，第一个值的索引为0</li>
<li>索引可以是负数，表示从尾部开始，-1代表最后一个值</li>
</ul>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">lset key <span class="keyword">index</span> value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><ul>
<li><p>删除指定的值</p>
<ul>
<li>将列表中前 count 次出现的值移除</li>
<li>count &gt; 0：从头往尾删除</li>
<li>count &lt; 0：从尾往头删除</li>
<li>count &#x3D; 0：删除所有值</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">lrem <span class="keyword">key</span> count value</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4、无序集合-set"><a href="#4、无序集合-set" class="headerlink" title="4、无序集合 set"></a>4、无序集合 set</h3><h4 id="set介绍"><a href="#set介绍" class="headerlink" title="set介绍"></a>set介绍</h4><ul>
<li>无序集合中值类型为字符串</li>
<li>集合中不允许有重复的值</li>
<li>对于集合中的值，只能添加和删除，不能修改</li>
</ul>
<h4 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h4><ul>
<li><p>集合中添加值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">sadd <span class="keyword">key</span> value1 value2.........</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h4><ul>
<li><p>返回所有值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">smembers <span class="keyword">key</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><ul>
<li><p>删除指定的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">srem <span class="keyword">key</span> value</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5、有序集合zset"><a href="#5、有序集合zset" class="headerlink" title="5、有序集合zset"></a>5、有序集合zset</h3><h4 id="zset介绍"><a href="#zset介绍" class="headerlink" title="zset介绍"></a>zset介绍</h4><ul>
<li>有序集合中的值类型为字符串</li>
<li>集合中不允许有重复的值</li>
<li>每个值都会关联一个分数，分数可以为附属，通过分数将值从小到大排序</li>
<li>对于集合中的值，只能添加和删除，不能修改</li>
</ul>
<p><img src="https://raw.githubusercontent.com/youhuiji/images/master/202208132238846.png" alt="图片名称"></p>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul>
<li><p>添加值</p>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">zadd key <span class="keyword">score1 </span>value1 <span class="keyword">score2 </span>value2</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取-2"><a href="#获取-2" class="headerlink" title="获取"></a>获取</h4><ul>
<li><p>返回指定范围内的值</p>
<ul>
<li>start，stop为值的下标索引</li>
<li>第一个值的索引为0</li>
<li>索引可以为负数，表示从尾部开始计数，-1表示最后一个值</li>
<li>withscores：同时获取值对应的分数(score)</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">zrange <span class="keyword">key</span> start <span class="keyword">stop</span>[withscores]</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回分数(score)在 min 和 max 之间的值</p>
  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zrangebyscore key <span class="built_in">min</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值 value 的分数(score)</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">zscore <span class="keyword">key</span> value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h4><ul>
<li><p>删除指定的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">zrem <span class="keyword">key</span> value1 value2........</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除分数(score)在指定范围之间的值</p>
  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zremrangebyscore key <span class="built_in">min</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>经验记录</title>
    <url>/2022/08/15/%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="1-更改ubuntu默认镜像源"><a href="#1-更改ubuntu默认镜像源" class="headerlink" title="1-更改ubuntu默认镜像源"></a>1-更改ubuntu默认镜像源</h3><p>开始 sources.list文件可能知识 read-only文件需要添加 write权限： </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod o+w /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>修改配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更改方式：将文件中的  archive.ubuntu.com 替换为 mirrors.aliyun.com 即可</p>
</blockquote>
<p>修改后的配置文件为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># team. Also, please note that software in universe WILL NOT receive any</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># review or updates from the Ubuntu security team.</span></span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal universe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.ubuntu.com/ubuntu/ focal universe</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates universe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.ubuntu.com/ubuntu/ focal-updates universe</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># team, and may not be under a free licence. Please satisfy yourself as to</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># your rights to use the software. Also, please note that software in</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># multiverse WILL NOT receive any review or updates from the Ubuntu</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># security team.</span></span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.ubuntu.com/ubuntu/ focal multiverse</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.ubuntu.com/ubuntu/ focal-updates multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># N.B. software from this repository may not have been tested as</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># extensively as that contained in the main release, although it includes</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># newer versions of some applications which may provide useful features.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Also, please note that software in backports WILL NOT receive any review</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># or updates from the Ubuntu security team.</span></span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.ubuntu.com/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Uncomment the following two lines to add software from Canonical&#x27;s</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># &#x27;partner&#x27; repository.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># This software is not part of Ubuntu, but is offered by Canonical and the</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># respective vendors as a service to Ubuntu users.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb http://archive.canonical.com/ubuntu focal partner</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://archive.canonical.com/ubuntu focal partner</span></span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu/ focal-security main restricted</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security universe</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu/ focal-security universe</span></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src http://security.ubuntu.com/ubuntu/ focal-security multiverse</span></span><br></pre></td></tr></table></figure>

<h3 id="2-python指向默认的python3"><a href="#2-python指向默认的python3" class="headerlink" title="2-python指向默认的python3"></a>2-python指向默认的python3</h3><p>查看当前映射关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /usr/bin/python*</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100024682.png" alt="image-20211208143328204" style="zoom:80%;" />

<p>可以看到 python并未指向python3</p>
<p>添加映射关系：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100024452.png" alt="image-20211208143536650" style="zoom:80%;" />

<h3 id="3-修改WSL默认的dns"><a href="#3-修改WSL默认的dns" class="headerlink" title="3-修改WSL默认的dns"></a>3-修改WSL默认的dns</h3><p>wsl 2 使用的 DNS 解析服务器设置在文件：<code>/etc/resolv.conf</code> 内设置，这是一个 link 文件，真正的文件路径是：<code>/run/resolvconf/resolv.conf</code>，这个文件是每次 wsl 启动时自动生成的，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">[network]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">generateResolvConf = <span class="literal">false</span></span></span><br><span class="line">nameserver 172.24.144.1</span><br></pre></td></tr></table></figure>

<p>修改方式：</p>
<ul>
<li>新建文件：<code>/etc/wsl.conf</code>，内容如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[network]</span><br><span class="line">generateResolvConf = false</span><br></pre></td></tr></table></figure>

<ul>
<li>退出 <code>wsl</code>之后，在<code>windows-terminal</code>中执行<code>wsl --shutdown</code></li>
<li>删除原有的<code>/etc/resolv.conf</code>文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<ul>
<li>新建 <code>/etc/resolv.conf</code> 文件，内容如下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nameserver 223.5.5.5</span><br></pre></td></tr></table></figure>

<ul>
<li>退出 <code>wsl</code>之后，在<code>windows-terminal</code>中执行<code>wsl --shutdown</code></li>
</ul>
<h3 id="4-连接虚拟机配置mpi环境"><a href="#4-连接虚拟机配置mpi环境" class="headerlink" title="4-连接虚拟机配置mpi环境"></a>4-连接虚拟机配置mpi环境</h3><ul>
<li>给虚拟机配置静态IP地址【见下一章】</li>
<li>在Toolchains中配置Remote Host并设置为默认环境</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100025255.png" alt="image-20211208172921970" style="zoom:60%;" />

<ul>
<li><p>安装 mpi （这里选择直接安装mpi而不是使用源码编译的方式）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mpich</span><br></pre></td></tr></table></figure>
</li>
<li><p>在clion中创建新的项目，将CMakes.list文件修改为：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.16)</span><br><span class="line">project(untitled)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD 14)</span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"><span class="comment"># 添加mpi环境</span></span><br><span class="line">find_package(MPI REQUIRED)</span><br><span class="line">include_directories(<span class="variable">$&#123;MPI_INCLUDE_PATH&#125;</span>)</span><br><span class="line">link_libraries(mpich)</span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line">add_executable(untitled main.cpp)</span><br></pre></td></tr></table></figure>

<ul>
<li>添加参数</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100017462.png" alt="image-20211208173621920" style="zoom:75%;" />

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100017549.png" alt="image-20211208173733165" style="zoom:80%;" />

<blockquote>
<p>若是选择WSL进行配置，在Executable中无论是选择mpirun还是mpiexec，都会报“无法找到\usr\bin\mpirun”错误</p>
<p>目前尚未找到解决办法</p>
</blockquote>
<h3 id="5-VM中配置静态IP地址"><a href="#5-VM中配置静态IP地址" class="headerlink" title="5-VM中配置静态IP地址"></a>5-VM中配置静态IP地址</h3><h6 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h6><img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100017460.png" alt="image-20211208214906060" style="zoom:80%;" />

<p>VMnet0：用于虚拟桥接网络下的虚拟交换机</p>
<p>桥接网络是指本地物理网卡和虚拟网卡通过VMnet0虚拟交换机进行桥接，物理网卡和虚拟网卡在拓扑图上处于同等地位。</p>
<p>VMnet1：用于虚拟Host-Only网络下的虚拟交换机（仅主机）</p>
<p>在Host-Only模式下，虚拟网络是一个全封闭的网络，它唯一能够访问的就是主机。</p>
<p>VMnet8：用于虚拟NAT网络下的虚拟交换机</p>
<p>在NAT网络中，会用到VMware Network Adepter VMnet8虚拟网卡，主机上的VMware Network Adepter VMnet8虚拟网卡被直接连接到VMnet8虚拟交换机上与虚拟网卡进行通信。</p>
<p>VMware Network Adepter VMnet1：Host用于与Host-Only虚拟网络进行通信的虚拟网卡</p>
<p>VMware Network Adepter VMnet8：Host用于与NAT虚拟网络进行通信的虚拟网卡</p>
<p><strong>综上所诉：在这三种网络模式中NAT模式是最简单的，基本不需要手动配置IP地址相关参数。桥接模需要配置额外的IP地址。</strong></p>
<h6 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h6><p>在使用ubuntu嵌入式开发过程中，不管是使用ssh登录虚拟机还是需要使用FTP,NFS等都需要开发虚拟机的IP一直不变，一般我们有两种方案，其一是使用一个路由器，虚拟机使用桥接的方式，直接接入路由器，然后设置使用静态IP的方式，另外一种就是是用NAT的方式，同时设置NAT方式为静态IP。这里只说明在设置NAT方式，及这过程中遇到的问题及解决方式</p>
<p>1、Vmware客户端配置</p>
<p>Vmware客户端的配置，编辑-&gt;虚拟网络编辑器，点击更改设置，然后安装下图</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100017206.png" alt="image-20211208215127365" style="zoom:80%;" />

<p>1.取消DHCP的勾选，2.NAT设置，记住其中的网关配置信息，如下图中的192.168.128.2，后面配置静态IP时需要用到</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018382.png" alt="image-20211208215145994" style="zoom:80%;" />

<p>2、Vmnet8配置</p>
<p>配置主机vmnet8的静态IP信息，如下图步骤所示，IP地址及其掩码参考vmware的NAT配置信息，DNS可以自己指定，下面使用的是阿里云的DNS</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018117.png" alt="image-20211208215331781" style="zoom:80%;" />

<blockquote>
<p>此处dns服务器地址可填可不填</p>
</blockquote>
<p>3、ubuntu虚拟机配置</p>
<p>从Ubuntu 17.10开始，已放弃在 &#x2F;etc&#x2F;network&#x2F;interfaces 里固定 IP 的配置，即使配置也不会生效。Ubuntu引入了一个名为Netplan的新工具，用于网络设置管理，Netplan将根据YAML描述文件，来配置网关参数信息。我们使用的是20.04的版本，我们需要修改<code>/etc/netplay/</code>目录下的.yaml文件，没有的话就新建一个(如果是图形化界面的话，直接在 setting —&gt;  network 中更改即可)，根据需要，配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">    <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span>     <span class="comment">#配置的网卡的名称</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.128</span><span class="number">.158</span><span class="string">/24</span>]    <span class="comment">#配置的静态ip地址和掩码</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span>    <span class="comment">#关闭DHCP，如果需要打开DHCP则写yes</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.128</span><span class="number">.2</span>    <span class="comment">#网关地址</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">         <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.31</span><span class="number">.2</span>]    <span class="comment">#DNS服务器地址，多个DNS服务器地址需要用英文逗号分隔开</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span>    <span class="comment">#指定后端采用systemd-networkd或者Network Manager，可不填写则默认使用systemd-workd</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>sudo netplan apply</code></p>
<blockquote>
<p>另外，有的说需要修改&#x2F;etc&#x2F;NetworkManager&#x2F;NetworkManager.conf文件，将managed&#x3D;false 改为managed&#x3D;true，但是我不修改也可以，供参考</p>
</blockquote>
<p>在设置这个文件时，一定要注意：</p>
<ul>
<li><p>ip地址和DNS服务器地址需要用[]括起来，但是网关地址不需要</p>
</li>
<li><p>注意每个冒号后边都要先加一个空格</p>
</li>
<li><p>注意每一层前边的缩进，至少比上一层多两个空格，推荐直接用4个空格，2个空格有时也会报错</p>
</li>
<li><p>其中遇到的巨坑，就是在填写DNS服务器时，也就是<code>nameservers</code>的addresses信息，我开始填写的是<code>223.5.5.5</code>，也就是一个公网阿里的DNS信息，导致在shell中ping百度时，怎么都是显示域名解析失败，但是ping百度的IP时，又是可以的，想了各种办法，发现是需要设置成网关的地址就行了。</p>
<blockquote>
<p>这里的问题就是为什么nameserver 域名地址不能写 <code>223.5.5.5</code>这类的dsn服务器域名，而是写本机网关地址，实际上配置成ali-dns的时候也可以正常访问网络。</p>
</blockquote>
</li>
</ul>
<h3 id="6-将图片修改为白色背景"><a href="#6-将图片修改为白色背景" class="headerlink" title="6-将图片修改为白色背景"></a>6-将图片修改为白色背景</h3><ul>
<li>打开待修改背景的图片</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018021.png" alt="image-20211209204315890" style="zoom:75%;" />

<ul>
<li>通过快捷键<code>CTRL + J</code>生成一个新的图层，避免原始图层被破坏</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018050.png" alt="image-20211209204435779" style="zoom:75%;" />

<ul>
<li>右键点击菜单，并选择魔棒工具</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018987.png" alt="image-20211209204533385" style="zoom:75%;" />

<ul>
<li>点击所选择背景，会自动吸附，然后点击快捷键<code>Del</code>，删除前置背景色，隐藏背景层，点击右下角工具栏，选择新建图层</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018575.png" alt="image-20211209205618570" style="zoom:80%;" />

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018229.png" alt="image-20211209204835345" style="zoom:80%;" />

<ul>
<li>左侧菜单栏修改前置背景色为白色，键入<code>ffffff</code></li>
</ul>
<p>​                                                               <img src=".picture\image-20211209204924464.png" alt="image-20211209204924464" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018412.png" alt="image-20211209205043767" style="zoom:80%;" />                </p>
<ul>
<li>使用快捷键<code>ALT + Del</code> 进行颜色填充，更改现有图层顺序，将图层呢二放在图层一的下方(直接拖动)</li>
</ul>
<h3 id="7-安装node"><a href="#7-安装node" class="headerlink" title="7-安装node"></a>7-安装node</h3><ul>
<li><p>通过官网直接下载<code>LTS</code>长期支持版本  <a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p>
</li>
<li><p>安装，直接一路默认即可，注意最好更改默认安装路径到非系统盘，避免后续产生读写权限问题</p>
</li>
<li><p>查看node 和npm版本号，验证环境变量是否添加成功</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018697.png" alt="image-20211211135039275" style="zoom:80%;" />

<ul>
<li><p>为节省系统盘空间，更改默认<code>node_cache</code>，以及<code>node_global</code>的位置，在非系统盘创建，<code>node_cache</code>，以及<code>node_global</code>，并在<code>node_global</code>目录下新建<code>node_moudles</code></p>
</li>
<li><p>打开<code>Terminal</code>，键入如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;创建的node_global文件夹所在路径&quot;</span><br><span class="line">npm config set cache &quot;创建的node_cache文件夹所在路径&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在系统变量中，新建，变量名：<code>NODE_PATH </code>变量值：<code>node_global</code>文件夹下的<code>node_modules</code>文件夹。如：<code>E:\software\nodejs\node_global\node_modules</code></p>
</li>
<li><p>修改用户变量中的Path变量，将默认的npm路径修改为新建的<code>node_global</code>路径，其中默认的 npm路径一般为<code>C/User/用户名/Appdata/Romaing/npm</code></p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100018609.png" alt="image-20211211134619349" style="zoom:70%;" />

<ul>
<li><p>修改 npm默认源为淘宝镜像源      <a href="https://npmmirror.com/">中国 NPM 镜像 (npmmirror.com)</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Treminal中输入 <code>npm config list</code>，验证镜像源是否配置成功</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100019735.png" alt="image-20211211135615943" style="zoom:75%;" /></li>
</ul>
<h3 id="8-安装Vue"><a href="#8-安装Vue" class="headerlink" title="8-安装Vue"></a>8-安装Vue</h3><ul>
<li><p>Vue官方文档网址  <a href="https://v3.cn.vuejs.org/guide/introduction.html">介绍 | Vue.js (vuejs.org)</a></p>
</li>
<li><p>安装Vue</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g vue</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Vue脚手架</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证vue是否安装完成，在Termianl中键入vue -V，可以看到报错</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100020369.png" alt="image-20211211140408977" style="zoom:75%;" />
</li>
<li><p>进入官方文档 <a href="https://docs.microsoft.com/zh-cn/previous-versions/windows/powershell-scripting/hh847748(v=wps.640)">about_Execution_Policies | Microsoft Docs</a>，根据官方指引在 Power Shell(管理员) 中修改策略，如下</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100020348.png" alt="image-20211211140744387" style="zoom:75%;" />

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Get-ExecutionPolicy</span><br><span class="line">Get-ExecutionPolicy -List</span><br><span class="line">Get-ExecutionPolicy -Scope CurrentUser</span><br><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Terminal再次验证配置是否成功，如下</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100020116.png" alt="image-20211211141018762" style="zoom:80%;" /></li>
</ul>
<h3 id="9-matplotlib报错AttributeError"><a href="#9-matplotlib报错AttributeError" class="headerlink" title="9-matplotlib报错AttributeError"></a>9-matplotlib报错AttributeError</h3><p>pip install matplotlib后报错：AttributeError: module ‘sip’ has no attribute ‘setapi’的解决办法</p>
<ul>
<li><p>新建虚拟环境，使用 pip install 安装各种包，使用过程中matplotlib报错：AttributeError: module ‘sip’ has no attribute ‘setapi’。查找网上资料，有人说可以matplotlib最新版本与其它版本不兼容，需要将matplotlib降级。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install matplotlib==3.3.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>但是奇怪的是 matplotlib 包已经安装，按理说一般都会向下兼容，仔细查看报错信息有如下：</p>
<img src=".picture\image-20211216221323952.png" alt="image-20211216221323952" style="zoom:80%;" />
</li>
<li><p>猜测可能是 matplotlib 的依赖环境 pyqt5 没有安装，查看依赖包确实没有安装，安装 pyqt5 问题得到解决</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100020809.png" alt="image-20211216221517665" style="zoom:75%;" />

<ul>
<li><pre><code class="bash">pip install pyqt5
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 10-取消代码被自动加入git</span><br><span class="line"></span><br><span class="line">- 在vs-code中，取消对 `Git:Enabled`的选用</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://raw.githubusercontent.com/youhuiji/images/master/202208100020728.png&quot; alt=&quot;image-20211229233837140&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">- `webstorm`中取消对`git`的绑定，--------&gt; 目前只找到 单个项目更改方式</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://raw.githubusercontent.com/youhuiji/images/master/202208100020246.png&quot; alt=&quot;img&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://raw.githubusercontent.com/youhuiji/images/master/202208100020543.png&quot; alt=&quot;img&quot; style=&quot;zoom:80%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">### 11- json.schemastore相关报错问题</span><br><span class="line"></span><br><span class="line">- 报错内容</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">Problems loading reference &#x27;http://json.schemastore.org/package&#x27;: Unable to</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>解决方式：</p>
</li>
</ul>
<p>既然无法连接到远端<code>schemaster</code>，那就改用离线模式，在 在 <code>User settings.json </code>中添加 <code>&quot;json.schemaDownload.enable&quot;: false</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">json.schemaDownload.<span class="built_in">enable</span><span class="string">&quot;: false</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100020908.png" alt="image-20211229235216886" style="zoom:75%;" />

<ul>
<li>重启<code>vscode</code>，问题解决</li>
</ul>
<h3 id="11-Anaconda常用命令"><a href="#11-Anaconda常用命令" class="headerlink" title="11-Anaconda常用命令"></a>11-Anaconda常用命令</h3><ul>
<li>查看安装了哪些包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前创建的虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda env list </span><br><span class="line">conda info -e</span><br></pre></td></tr></table></figure>

<ul>
<li>更新当前conda</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure>

<ul>
<li>创建虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n your_env_name python=x.x</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如创建python3.7版本的虚拟环境</span></span><br><span class="line">conda create -n env_py37 python=3.7</span><br></pre></td></tr></table></figure>

<p>anaconda命令创建python版本为x.x，名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。</p>
<ul>
<li>激活或者切换虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">activate your_env_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果上面的指令没有起作用，则用 :</span></span><br><span class="line">conda activate your_env_name</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100020477.png" alt="image-20220529180620420" style="zoom:70%;" />

<ul>
<li>退出当前虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate env_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果不起作用，采用指令：</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<ul>
<li>删除虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n your_env_name --all</span><br></pre></td></tr></table></figure>

<ul>
<li>删除虚拟环境中的某个包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove --name $your_env_name  $package_name </span><br></pre></td></tr></table></figure>

<ul>
<li>为Ananconda设置清华大学镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加清华镜像源</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn</span><br><span class="line"># 设置搜索时显示通道地址，该命令会创建 .condarc文件</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>

<p>如果此途径修改失败，可以参考清华官方指引：<a href="https://mirrors4.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors4.tuna.tsinghua.edu.cn/help/anaconda/</a></p>
<ul>
<li>取消使用清华镜像源，使用默认镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure>

<ul>
<li>pip 指定下载镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<ul>
<li>创建虚拟环境后，常用包安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install numpy</span><br><span class="line">conda install pandas</span><br><span class="line">conda install matplotlib</span><br></pre></td></tr></table></figure>

<h3 id="12-将本地代码推送至Gitee仓库"><a href="#12-将本地代码推送至Gitee仓库" class="headerlink" title="12-将本地代码推送至Gitee仓库"></a>12-将本地代码推送至Gitee仓库</h3><ul>
<li>在码云上创建一个新的仓库</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021425.png" alt="image-20220106090356041" style="zoom:67%;" />

<ul>
<li>在要被上传的项目的目录右键， 选择 Git Bash Here. </li>
<li>在窗口输入命令： <code>git init</code>   这时候文件夹会多出一个<code>.git</code>文件夹，看不到文件夹的，点击鼠标右键选择“显示不显示隐藏的文件”就可以看到这个文件夹了</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021951.png" alt="image-20220106090532453" style="zoom:80%;" />

<ul>
<li>在窗口输入命令：  git remote add origin + 仓库地址</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021926.png" alt="image-20220106090606021" style="zoom:80%;" />

<ul>
<li>命令：git add .    （. 表示所有的）或者 git add + 文件名    将要添加的文件保存在本地缓冲区。</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021557.png" alt="image-20220106090736728" style="zoom:80%;" />

<ul>
<li>命令：git commit -m ‘新添加的文件内容描述’ 。 给本次提交添加备注</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021127.png" alt="image-20220106090816532" style="zoom:80%;" />

<ul>
<li>命令：git push origin master ，将本地仓库推送到远程码云仓库。</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021087.png" alt="image-20220106090848411" style="zoom:80%;" />

<ul>
<li>在 git add 阶段，发现出现 将 LF替换为 CRLF的警告</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021486.png" alt="image-20220106091855296" style="zoom:80%;" />

<blockquote>
<p>名词解释：</p>
<p>LF ： Linefeed ,对应ASCLL中转义字符 \n ，表示换行  （Unix\Linux）</p>
<p>CR：Carriage Return，对应ASCII中转义字符 \r，表示回车 (MacIntosh)</p>
<p>CRLF：Carriage Return &amp; Linefeed，\r\n，表示回车并换行 （Windows）</p>
</blockquote>
<p>原因：git提供了一个默认启动的  <code>换行符自动转换</code>, 这个<code>换行符自动转换</code>会把自动把你代码里 与你当前操作系统不相同的换行的方式 转换成当前系统的换行方式（即<code>LF</code>和<code>CRLF</code> 之间的转换）</p>
<p>解决办法：关闭 <code>git</code>  <code>换行符自动转换</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config core.autocrlf false (仅对当前git仓库有效）</span><br><span class="line">git config --global core.autocrlf false (全局有效，不设置推荐全局）</span><br><span class="line"># 不建议进行全局设置 实际上 Warning 无伤大雅，可以直接忽略</span><br></pre></td></tr></table></figure>

<h3 id="13-VsCdoe中python中文输出乱码"><a href="#13-VsCdoe中python中文输出乱码" class="headerlink" title="13-VsCdoe中python中文输出乱码"></a>13-VsCdoe中python中文输出乱码</h3><p>尝试使用<code>vscode</code>写<code>python</code>的时候，中文输出乱码，如下图：</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021603.png" alt="image-20220118173849003"  />

<p>起初以为是系统编码的问题，遂在终端运行代码，可见不是系统编码的问题：</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100038093.png" alt="image-20220118174045485"  />

<p>考虑是使用插件<code>code run</code>的问题，遂百度搜索修改<code>code run</code>编码，如下图：</p>
<p><img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021685.png" alt="image-20220118174314243"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">    &quot;python&quot;: &quot;set PYTHONIOENCODING=utf-8 &amp;&amp; python&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题解决：</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021798.png" alt="image-20220118174415098"  />

<h3 id="14-zsh配置与安装"><a href="#14-zsh配置与安装" class="headerlink" title="14-zsh配置与安装"></a>14-zsh配置与安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sudo apt install git</span><br><span class="line">chsh -s /usr/bin/zsh</span><br><span class="line">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里如果提示连接失败进入 oh-my-zsh代码库 (https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh) 复制 install.sh到本地</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后执行 bash ./install.sh</span></span><br><span class="line"></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在该文件中的插件处 添加 zsh-autosuggestions zsh-syntax-highlighting</span></span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021945.png" alt="image-20220530013034557" style="zoom:80%;" />

<h5 id="1、Miniconda配置"><a href="#1、Miniconda配置" class="headerlink" title="1、Miniconda配置"></a>1、<strong>Miniconda配置</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">#########文件添加如下：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!! Contents within this block are managed by <span class="string">&#x27;conda init&#x27;</span> !!</span></span><br><span class="line">__conda_setup=&quot;$(&#x27;/home/z/miniconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    eval &quot;$__conda_setup&quot;</span><br><span class="line">else</span><br><span class="line">    if [ -f &quot;/home/z/miniconda3/etc/profile.d/conda.sh&quot; ]; then</span><br><span class="line">        . &quot;/home/z/miniconda3/etc/profile.d/conda.sh&quot;</span><br><span class="line">    else</span><br><span class="line">        export PATH=&quot;/home/z/miniconda3/bin:$PATH&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">unset __conda_setup</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; <span class="string">conda initialize &lt;&lt;&lt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2、未安装包提示"><a href="#2、未安装包提示" class="headerlink" title="2、未安装包提示"></a>2、未安装包提示</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install command-not-found</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">##########文件添加如下：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt;&gt; get zsh_command_not_found info &gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">. /etc/zsh_command_not_found</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line">source ~/.zshrc\</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3、显示全文件目录"><a href="#3、显示全文件目录" class="headerlink" title="3、显示全文件目录"></a>3、显示全文件目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/themes</span><br><span class="line">vim robbyrussell.zsh-theme</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第二行修改为 PROMPT+=<span class="string">&#x27; %&#123;$fg[cyan]%&#125;[$PWD]%&#123;$reset_color%&#125; $(git_prompt_info)&#x27;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="15-pprint-—python美化打印标准库"><a href="#15-pprint-—python美化打印标准库" class="headerlink" title="15-pprint()—python美化打印标准库"></a>15-pprint()—python美化打印标准库</h3><blockquote>
<p>pprint 是“pretty printer”的简写，“pretty”的含义是“漂亮的、美观的”，还有表示“相当地”的程度语气，因此它的含义便是：（相当）美观的打印。</p>
</blockquote>
<h5 id="1、简单使用"><a href="#1、简单使用" class="headerlink" title="1、简单使用"></a>1、简单使用</h5><p><em>语法：pprint(object, stream&#x3D;None, indent&#x3D;1, width&#x3D;80, depth&#x3D;None,</em>,compact&#x3D;False)</p>
<p>默认的行宽度参数为 80，当打印的字符（character）小于 80 时，pprint() 基本上等同于内置函数 print()，当字符超出时，它会作美化，进行格式化输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mylist = [<span class="string">&quot;Beautiful is better than ugly.&quot;</span>, <span class="string">&quot;Explicit is better than implicit.&quot;</span>, <span class="string">&quot;Simple is better than complex.&quot;</span>, <span class="string">&quot;Complex is better than complicated.&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印上例的 mylist</span></span><br><span class="line">pprint.pprint(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印的元素是换行的（因为超出80字符）：</span></span><br><span class="line">[<span class="string">&#x27;Beautiful is better than ugly.&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Explicit is better than implicit.&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Simple is better than complex.&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Complex is better than complicated.&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="2、设置缩进为4个空格-默认为1"><a href="#2、设置缩进为4个空格-默认为1" class="headerlink" title="2、设置缩进为4个空格(默认为1)"></a>2、设置缩进为4个空格(默认为1)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pprint.pprint(mylist, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">[   <span class="string">&#x27;Beautiful is better than ugly.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Explicit is better than implicit.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Simple is better than complex.&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Complex is better than complicated.&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h5 id="3、设置打印的行宽"><a href="#3、设置打印的行宽" class="headerlink" title="3、设置打印的行宽"></a>3、设置打印的行宽</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mydict = &#123;<span class="string">&#x27;students&#x27;</span>: [&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Jerry&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">pprint.pprint(mydict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 未超长：</span></span><br><span class="line">&#123;<span class="string">&#x27;students&#x27;</span>: [&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jerry&#x27;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">pprint.pprint(mydict, width=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超长1：</span></span><br><span class="line">&#123;<span class="string">&#x27;students&#x27;</span>: [&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>,</span><br><span class="line">               <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>,</span><br><span class="line">               <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jerry&#x27;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">pprint.pprint(mydict, width=<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超长2：</span></span><br><span class="line">&#123;<span class="string">&#x27;students&#x27;</span>: [&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;,</span><br><span class="line">              &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">19</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Jerry&#x27;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4、设置打印的层级-默认全打印"><a href="#4、设置打印的层级-默认全打印" class="headerlink" title="4、设置打印的层级(默认全打印)"></a>4、设置打印的层级(默认全打印)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newlist = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]]]</span><br><span class="line"></span><br><span class="line">pprint.pprint(newlist, depth=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超出的层级会用...表示</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [...]]]]</span><br></pre></td></tr></table></figure>

<h5 id="5、优化循环结构的打印"><a href="#5、优化循环结构的打印" class="headerlink" title="5、优化循环结构的打印"></a>5、优化循环结构的打印</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">newlist = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">newlist.insert(<span class="number">0</span>, newlist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表元素指向列表自身，造成循环引用</span></span><br><span class="line"><span class="comment"># 直接 print 的结果是：[[...], 1, 2]</span></span><br><span class="line"></span><br><span class="line">pprint.pprint(newlist)</span><br><span class="line"><span class="comment"># [&lt;Recursion on list with id=1741283656456&gt;, 1, 2]</span></span><br><span class="line"></span><br><span class="line">pprint.saferepr(newlist)</span><br><span class="line"><span class="comment"># &#x27;[&lt;Recursion on list with id=1741283656456&gt;, 1, 2]&#x27;</span></span><br></pre></td></tr></table></figure>

<h5 id="6、判断是否出现循环结构"><a href="#6、判断是否出现循环结构" class="headerlink" title="6、判断是否出现循环结构"></a>6、判断是否出现循环结构</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pprint.isrecursive(newlist)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">pprint.isreadable(newlist)</span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<h4 id="16-Vscode正确选择Anaconda虚拟环境"><a href="#16-Vscode正确选择Anaconda虚拟环境" class="headerlink" title="16-Vscode正确选择Anaconda虚拟环境"></a>16-Vscode正确选择Anaconda虚拟环境</h4><ul>
<li>首先确定已经创建目标虚拟环境</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100021053.png" alt="image-20220323171731714" style="zoom:80%;" />

<ul>
<li>在Vscode设置中搜索 <code>python.venv</code> ，如下图所示，添加自己的目标路径以及文件夹</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022546.png" alt="image-20220323171850803" style="zoom:80%;" />

<ul>
<li>ctrl + shift + p 调出选项卡</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100039075.png" alt="image-20220323172025672" style="zoom:80%;" />

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022142.png" alt="image-20220323172046550" style="zoom:80%;" />

<h3 id="17-WSL中的SSH连接"><a href="#17-WSL中的SSH连接" class="headerlink" title="17-WSL中的SSH连接"></a>17-WSL中的SSH连接</h3><h5 id="1、SSH基础配置"><a href="#1、SSH基础配置" class="headerlink" title="1、SSH基础配置"></a>1、SSH基础配置</h5><ul>
<li>卸载原有的ssh服务（原有的ssh服务可能会存在连接失败的情况）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove openssh-server</span><br></pre></td></tr></table></figure>

<ul>
<li>重装ssh服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sapt install openssh-server</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件：&#x2F;etc&#x2F;ssh&#x2F;sshd_config</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install vim</span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ssh服务监听端口号</span></span><br><span class="line">Port 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许通过用户名密码方式登入</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许root用户登入</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">监听地址</span></span><br><span class="line">ListenAddress 0.0.0.0</span><br></pre></td></tr></table></figure>

<ul>
<li>重启ssh服务</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>

<h5 id="2、本地连接"><a href="#2、本地连接" class="headerlink" title="2、本地连接"></a>2、本地连接</h5><ul>
<li>在Windows Terminal中通过ssh命令连接wsl子系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">命令格式 ssh user_name@IpAddress -p ListenPort</span></span><br><span class="line">ssh z@localhost -p 2222 </span><br></pre></td></tr></table></figure>

<h3 id="18-在WSL中安装Minicoda"><a href="#18-在WSL中安装Minicoda" class="headerlink" title="18-在WSL中安装Minicoda"></a>18-在WSL中安装Minicoda</h3><ul>
<li>下载Miniconda</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里下载的Miniconda版本对应的是python3.7</span> </span><br><span class="line">wget -c https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh -O Miniconda-py37.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Miniconda官网：https://conda.io/miniconda.html</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装Miniconda</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予Miniconda运行权限</span></span><br><span class="line">sudo chmod u+x  Miniconda-py37.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行</span></span><br><span class="line">bash Miniconda-py37.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>这里需要注意的是，如果是一个全新干净的系统，安装过程中可以一路默认安装，如果已经安装其它依赖原生系统python的版本，最后在询问是否将conda加入环境变量的时候最好选择no，以避免导致未知的错误。【可以参考的错误经历：<a href="https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247486380&idx=1&sn=9329fcd0a60ac5488607d359d6c28134&chksm=9b484b17ac3fc20153d25cbdefe5017c7aa9080d13b5473a05f79808244e848b0a45d2a6a735&scene=21#wechat_redirect">Anaconda is a snake</a>】</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022793.png" alt="image-20220528000612498" style="zoom:80%;" />

<h5 id="1、默认安装过程"><a href="#1、默认安装过程" class="headerlink" title="1、默认安装过程"></a>1、默认安装过程</h5><ul>
<li>安装完成之后进入Minicodna安装目录，可以看到<code>python</code>和<code>python3</code>已经指向 Miniconda的python版本</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022249.png" alt="image-20220528002757055" style="zoom:80%;" />

<ul>
<li><p>在通过默认安装结束之后，在命令行中会出现一个 <code>（base）XXXXX</code> 的形式，此时可以通过键入 <code>conda deactivate</code> 退出conda的base模式，但是这样做下次启动时还是会出现<code>（base）XXXXX</code> ，而且python链接重新指向了系统内置版本，很明显治标不治本。</p>
</li>
<li><p>在conda官方文档中【<a href="https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#change-command-prompt-changeps1">conda官方手册</a>】有这样的描述</p>
<blockquote>
<p>When using conda activate, change the command prompt from <code>$PS1</code> to include the activated environment. The default is True.</p>
<blockquote>
<p>EXAMPLE:<br><code>changeps1: False</code></p>
</blockquote>
</blockquote>
</li>
</ul>
<p>所以只需要在<code>.condarc</code> 文件中，加入 <code> changeps1: False</code> ，即可消除<code>(base)</code>字样，同时python链接指向变为Miniconda的版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.condarc</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022964.png" alt="image-20220528001615084" style="zoom:80%;" />

<h5 id="2、不将conda默认添加进系统环境"><a href="#2、不将conda默认添加进系统环境" class="headerlink" title="2、不将conda默认添加进系统环境"></a>2、不将conda默认添加进系统环境</h5><ul>
<li><p>参考教程 【<a href="https://www.jianshu.com/p/edaa744ea47d">conda 安装教程</a>】</p>
</li>
<li><p>此时在命令行中键入 <code>conda</code> 是没有任何反应的。此时需要在Miniconda安装目录下，赋予activate，启动权限。Miniconda默认安装路径为 <code>/home/user_name/miniconda3/bin</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予所有用户运行权限</span></span><br><span class="line">sudo chmod a+x activate</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022335.png" alt="image-20220528002650110" style="zoom:80%;" />

<ul>
<li>启动conda</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ./activate</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">. ./activate 也是可以的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这时命令行前面出现<code>(base)</code>的时候说明现在已经在conda的环境中了。这时候输入<code>conda list</code> 命令就有反应了</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022711.png" alt="image-20220528002622456" style="zoom:80%;" />

<h3 id="19-在WSL中安装JDK"><a href="#19-在WSL中安装JDK" class="headerlink" title="19-在WSL中安装JDK"></a>19-在WSL中安装JDK</h3><h5 id="1、OpenJDK"><a href="#1、OpenJDK" class="headerlink" title="1、OpenJDK"></a>1、OpenJDK</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">web-src</span></span><br><span class="line">http://www.codebaoku.com/jdk/jdk-openjdk.html#jdk11.0.2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索库中可用的openjdk版本</span></span><br><span class="line">apt search openjdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 安装jdk11的版本(LTS)</span></span><br><span class="line">sudo apt install openjdk-11-jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜寻JDK安装的默认路径</span></span><br><span class="line">dpkg -L openjdk-11-jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装jdk8版本(使用最多的LTS版本)</span></span><br><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>

<ul>
<li>由下图可以看到，openjdk默认安装路径是在 <code>/usr/lib/jvm</code> 下</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022989.png" alt="image-20220530120034159" style="zoom:75%;" />

<ul>
<li>验证是否安装成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/jvm</span><br><span class="line">ll -a</span><br><span class="line">cd /usr/lib/jvm/java-11-openjdk-amd64/bin</span><br><span class="line">ll -a | grep java</span><br><span class="line">./java --verison</span><br><span class="line">cd /usr/lib/jvm/java-8-openjdk-amd64/bin</span><br><span class="line">ll -a | grep java</span><br><span class="line">./java --verison</span><br><span class="line">cd ~</span><br><span class="line">java --version</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022284.png" alt="image-20220530120355674" style="zoom:75%;" />

<h5 id="2、OracleJDK"><a href="#2、OracleJDK" class="headerlink" title="2、OracleJDK"></a>2、OracleJDK</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载oracle-jdk-1.8</span></span><br><span class="line">wget https://120-195-166-66.d.123pan.cn:30443/123-794/1b81dd07/1661483-0/1b81dd078f19e60365757c56a58ca71a\?v\=1\&amp;t\=1653878904\&amp;s\=911675691551fa6fc2bafc8ee6b3614d\&amp;filename\=jdk-8u331-linux-x64.tar.gz\&amp;d\=5e41af74 -O oraclejdk-8.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载oracle-jdk-11</span></span><br><span class="line">wget https://36-156-71-22.d.123pan.cn:30443/123-226/31827360/1661483-0/31827360e0811206c1725b5d4a37d8e2\?v\=1\&amp;t\=1653878806\&amp;s\=c2fe637b3fb235a6cb53c346de2b2f49\&amp;filename\=jdk-11.0.15_linux-x64_bin.deb\&amp;d\=9836dae9 -O oraclejdk-11.deb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装 oraclejdk-11.deb</span></span><br><span class="line">sudo dpkg -i oraclejdk-11.deb</span><br><span class="line">cd /usr/lib/jvm/jdk-11/bin</span><br><span class="line">./java --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 oracle-jdk-1.8</span></span><br><span class="line">cd ~</span><br><span class="line">extract oraclejdk-8.tar.gz</span><br><span class="line">mv ~/jdk1.8.0_331 /usr/lib/jvm</span><br><span class="line">cd /usr/lib/jvm/jdk1.8.0_331/bin</span><br><span class="line">./java -version</span><br></pre></td></tr></table></figure>

<h5 id="3、JDK版本自由切换"><a href="#3、JDK版本自由切换" class="headerlink" title="3、JDK版本自由切换"></a>3、JDK版本自由切换</h5><ul>
<li>上诉四个版本安装完成之后，系统默认jdk版本是安装的第一个版本</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022847.png" alt="image-20220530121705131" style="zoom:80%;" />

<ul>
<li><pre><code class="shell">vim ~/.zshrc

# &gt;&gt;&gt;&gt;&gt;&gt; jdk version change &gt;&gt;&gt;&gt;&gt;&gt;&gt;
export PATH=&quot;/usr/lib/jvm/java-11-openjdk-amd64/bin:$PATH&quot;
# &gt;&gt;&gt;&gt;&gt;&gt; jdk version change end &gt;&gt;&gt;&gt;&gt;&gt;&gt;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 实际上，除了修改`.zshrc`文件外，还存在另一种方式，使用` update-alternatives`，这本来就是设计为了在单系统中提供多版本环境配置的一个解决方案。</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-11/bin/java 300</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_331/bin/java 200</span><br><span class="line">#切换jdk版本</span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>为了方便起见，优先选择第一种解决方案，第一种方案是直接把下面的命令都导入全局了，而第二种方案只是设置了一个java命令，虽然看上去切换更智能了，但是其他bin目录下的其他命令都未进行设置，也就是全局环境是是找不到其他命令的。</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022147.png" alt="image-20220530122531601" style="zoom:80%;" />

<ul>
<li>注意在使用IDEA连接WSL的JAVA环境时，需要保证防火墙对IDEA开放</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行以下命令以允许使用 WSL 进行连接：</span></span><br><span class="line">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound  -InterfaceAlias &quot;vEthernet (WSL)&quot;  -Action Allow</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后执行以下命令以续订防火墙规则</span></span><br><span class="line">Get-NetFirewallProfile -Name Public | Get-NetFirewallRule | where DisplayName -ILike &quot;IntelliJ IDEA*&quot; | Disable-NetFirewallRule</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100029538.png" alt="image-20220601015814509" style="zoom:100%;" />

<h3 id="20-在WSL中安装maven"><a href="#20-在WSL中安装maven" class="headerlink" title="20-在WSL中安装maven"></a>20-在WSL中安装maven</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt search maven</span><br><span class="line">sudo apt install maven</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看maven默认安装路径</span></span><br><span class="line">dpkg -L maven</span><br></pre></td></tr></table></figure>

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022609.png" alt="image-20220531013418745" style="zoom:80%;" />

<ul>
<li>注意，<code>maven</code>的<code>setting.xml</code>文件在 <code>/etc/maven</code>目录下，默认安装目录在<code> /usr/share/maven</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">采用阿里镜像源</span></span><br><span class="line">cd /etc/maven</span><br><span class="line">code .</span><br></pre></td></tr></table></figure>

<ul>
<li>将setting.xml文件修改如下：（分别对应使用阿里云镜像，修改下载包文件的默认地址）</li>
</ul>
<img  src="https://raw.githubusercontent.com/youhuiji/images/202208100022516.png" alt="image-20220531015849755" style="zoom:80%;" />

<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022952.png" alt="image-20220531015958810" style="zoom:80%;" />

<h3 id="21-学习强国"><a href="#21-学习强国" class="headerlink" title="21-学习强国"></a>21-学习强国</h3><h5 id="下载及配置chromedriver"><a href="#下载及配置chromedriver" class="headerlink" title="下载及配置chromedriver"></a>下载及配置chromedriver</h5><ul>
<li>国内镜像网站：<a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">chromedriver-npm_taobao_mirrors</a></li>
<li>国外官网：<a href="https://chromedriver.chromium.org/">chromedriver-org</a></li>
<li>&lt;每次找软件或者包镜像时，真的羡慕原先他们<code>google</code>还没被禁止的日子，我也想run到墙外&gt;</li>
<li>打开谷歌浏览器，在网址栏键入 <code>chrome://version/</code>，如果使用 <code>edge</code>浏览器则键入 <code>edge://version/</code></li>
<li>添加环境变量 <code>Path</code>，打开方式：设置–&gt;系统–&gt;关于–&gt;高级系统设置–&gt;环境变量–&gt;系统变量–&gt;Path</li>
</ul>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208100022937.png" alt="image-20220715005705584" style="zoom:60%;" />

<ul>
<li><strong>最好是重启一下电脑</strong>，我因为没有重启电脑，找了很久错误，后来想了以下也许环境变量没有生效，重启之后，问题解决。</li>
</ul>
<h5 id="下载及运行"><a href="#下载及运行" class="headerlink" title="下载及运行"></a>下载及运行</h5><ul>
<li><p>源码网址：<a href="https://github.com/TechXueXi/TechXueXi">TechXueXi&#x2F;TechXueXi</a></p>
</li>
<li><p>下载源代码</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Desktop</span><br><span class="line">git clone https://github.com/TechXueXi/TechXueXi.git</span><br></pre></td></tr></table></figure>

<ul>
<li>通过 <code>vscode</code>或者 <code>pycharm</code>打开源代码</li>
<li>切换到需要的虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda env list</span><br><span class="line">conda activate env_py37</span><br></pre></td></tr></table></figure>

<ul>
<li>下载源代码所需要的依赖环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">或者使用清华镜像源加速 但是可能会出现部分包不存在的情况</span></span><br><span class="line">pip intsall -r requirements.txt -i  https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日常使用</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工程师备考</title>
    <url>/2022/08/13/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A4%87%E8%80%83/</url>
    <content><![CDATA[<h3 id="考试目的"><a href="#考试目的" class="headerlink" title="考试目的"></a>考试目的</h3><p>今天突然发现2021年上半年的网络工程师及格线出来了，还是跟原来一样，45分就算及格。</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208132245932.png" alt="img" style="zoom:80%;" />

<p>我这上午考了47分，下午考了54分，也算是通过了网络工程师考试了。而我参加这个网络工程师考试只是为了我能在保研的时候能加分，一个看起来有点功利的目的。</p>
<p>这篇博客算是一个总结，希望可以给其他想要参加考试的人一个小小的参考。</p>
<hr>
<h3 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h3><p> 在网络工程师考试中，分为<strong>上午考试</strong>和<strong>下午考试</strong>，两场考试需要都通过才算是合格。</p>
<p> 在上午的考试中，全部都是单项选择题，每个选择题分值是1分，总分75分，答对60%就可以获得45分。在单项选择中，最后5道题是英文题，一般都是与某个计算机网络的具体概念有关，比如说VPN，IPv6，IPv4，MAC等等，这就要求你需要知道一些中文概念或者短语对应的英文。这5道题一般都不难，可以通过上下文判断。</p>
<p> 在下午的考试中，主要内容是网络系统设计与管理，也就是规划设计题和交换机或者路由器的配置问题。在2021年上半年的考试中，绝大部分都是给了备选项的，就类似于一个大题挖出来10个空，然后给你12个备选项，让你选择。不过也有一部分的题目，没有给出备选项，就是一个单纯的填空题或者问答题，这就要看你平时的知识积累了。整体难度不是很大。这个题目分布就不规律了，不过同样是总分75分，拿到60%就可以获得45分。</p>
<blockquote>
<p>无论是上午考试还是下午考试，都是150分钟。</p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p> 在上午的考试中需要填答题卡，所以就需要你自备</p>
<p> 1.一支2B铅笔用来涂卡</p>
<p> 2.橡皮擦</p>
<p> 3.黑色圆珠笔(我当时用的是0.5mm的，我记得对于粗细没有规定)。</p>
<p> 4.个人准考证(黑白即可，不需要彩印)</p>
<p> 5.个人身份证。</p>
<p> 因为我当时参加考试时全国部分地区还有新冠病例，所以还要求有:</p>
<p> 6.健康码(绿码)</p>
<p> 7.个人行程码</p>
<p> 8.如果你来自于中风险地区，需要核酸检测阴性证明。</p>
<h3 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h3><p> 1.参考书籍官网都给出了，这里我挂个官网链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.ruankao.org.cn/book/lists</span><br></pre></td></tr></table></figure>

<p> 这里我给出我当时收集到的网络工程师教程(第五版)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1zkznQk_bm9L6yNmWBwGikg 提取码：1234 </span><br></pre></td></tr></table></figure>

<p>如果你把这本书作为参考的话，就需要提前2-3个月准备，因为这本书真的很厚，而且知识点很多，你除了需要理解之外还需要背诵。当你把这本书融汇贯通之后，上午的考试肯定可以拿到高分，不过对于临时抱佛脚，想要突击几天的人不合适。</p>
<p> 2.我用的书：</p>
<p> 2-1.参考书是：朱小平老师出的《网络工程师5天修炼》</p>
<p> 2-2.习题是：朱小平老师的《网络工程师考前冲刺100题》(第二版)，《网络工程师真题精讲与押题密卷》</p>
<p>我这不是打广告(手动狗头)，因为市面上你能找到的关于网络工程师而且销量高的就这几本，还有一个就是希赛的，但是人家的书是跟视频课绑定的，他这个视频课需要好几千，对于在校生来说不是首选项。</p>
<p>2-3.还有一本书是：谢希仁老师的《计算机网络(第7版)》。</p>
<blockquote>
<p>其中谢希仁老师的书可以在看朱小平老师的书之前大致浏览一遍，因为刚学过计算机网络这时候再复习一遍，知识点会更加牢固。不过这本书不适合作为全程的复习参考书，这个只是一个开胃菜，作为强化计算机网路知识的一个方式。重点还是朱小平老师的《网络工程师5天修炼》，这本书包含的考点更多，也更像是一本为了考试而准备的知识点大全，所以对于这本书既要理解也要背诵。学完每一章之后，就可以按照自己的习惯去做对应的《考前冲刺100题》对应习题了。这个100题的题量很小，不过能起到一个查漏补缺和知识点拓展补充的作用。所以重点还是相应知识点的理解和记忆。</p>
</blockquote>
<p>对于《网络工程师真题精讲与押题密卷》这本书，就是几套真题和模拟题，其中2021年的书的目录是这样的：</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208132248407.png" alt="在这里插入图片描述" style="zoom:80%;" />

<p>这几套题可以用来练手，我当时是在5天修炼以及100题都看完做完之后才开始的，一天一套，刚好考前做完。当然如果时间充裕的话还可以做一做2018年以前的选择题和部分规划题。其中2018年开始采用新的考纲，主要是不再使用和考察思科的命令，而改用和考察华为的命令，以及部分知识点的调整。下面给出我当时收集到的2018年以后真题及参考答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1UBY-OohgMB0nqcRujXk6xg 提取码：1234 </span><br></pre></td></tr></table></figure>



<h3 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h3><p>1.现在网上(B站)比较流行的视频有大涛的和希赛教育的。其中大涛的是2018年版的似乎，而希赛在B站有官方账号，会免费分享一些学年的视频。如下图，这里第一个就是希赛官方分享的视频，第二个是大涛的2018年的教学视频。（这里第二个虽然注明了2019年最新，但是你点开之后还是2018年视频。）</p>
<img src="https://raw.githubusercontent.com/youhuiji/images/master/202208132249904.png" alt="在这里插入图片描述" style="zoom:80%;" />

<p>2.我当时看的也是希赛的视频，是2018版的，不过不是上图的男老师，是一个女老师，具体链接如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1EV411U7QX?from=search&amp;seid=12371943451293901882</span><br></pre></td></tr></table></figure>

<p>在看这个视频的时候可以结合朱小平老师的5天修炼，做一下笔记。我当时是先把视频刷完，熟悉一下知识点，然后才开始看的5天修炼。这里给出我当时做的笔记供大家参考(最好还是自己看的时候做一下笔记)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1PAaO-3Ch0sYHchQO6-Ndow 提取码：1234 </span><br></pre></td></tr></table></figure>

<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><ol>
<li>视频还是推荐希赛的，大涛的我当时也听了，说实话我不喜欢。具体你可以都听听试一下，看你喜欢哪个。</li>
<li>因为考试是面向全社会的，跟你坐在同一个考场的只有一小部分是学生，大部分都是步入社会的成年人。他们有可能会作弊，但是你不要作弊，你就好好学，然后去考试，一定可以过的。虽然监考老师对于作弊的人不会怎么样，但是如果巡考发现就会直接取消你的考试资格，似乎信用上也会给你记一笔。最重要的还是放平心态。</li>
<li>最后，我当时参加的是河南省的考试，考点就两个一个是郑州，一个是新乡，其中我当时的考点的是新乡的新乡学院。</li>
<li>有其他问题可以评论或者私信。我看到就会回复的。加油！</li>
</ol>
]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
</search>
