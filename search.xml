<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WSL安装JDK</title>
    <url>/2022/08/15/WSL%E5%AE%89%E8%A3%85JDK/</url>
    <content><![CDATA[<h5 id="1、OpenJDK"><a href="#1、OpenJDK" class="headerlink" title="1、OpenJDK"></a>1、OpenJDK</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">web-src     <span class="comment">#jdk11.0.2</span></span></span><br><span class="line">http://www.codebaoku.com/jdk/jdk-openjdk.html  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索库中可用的openjdk版本</span></span><br><span class="line">apt search openjdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 安装jdk11的版本(LTS)</span></span><br><span class="line">sudo apt install openjdk-11-jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜寻JDK安装的默认路径</span></span><br><span class="line">dpkg -L openjdk-11-jdk</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装jdk8版本(使用最多的LTS版本)</span></span><br><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>

<ul>
<li>由下图可以看到，openjdk默认安装路径是在 <code>/usr/lib/jvm</code> 下</li>
</ul>
<img src="/../images-static/202208100022989.png" alt="image-20220530120034159" style="zoom:75%;" />

<ul>
<li>验证是否安装成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/jvm</span><br><span class="line">ll -a</span><br><span class="line">cd /usr/lib/jvm/java-11-openjdk-amd64/bin</span><br><span class="line">ll -a | grep java</span><br><span class="line">./java --verison</span><br><span class="line">cd /usr/lib/jvm/java-8-openjdk-amd64/bin</span><br><span class="line">ll -a | grep java</span><br><span class="line">./java --verison</span><br><span class="line">cd ~</span><br><span class="line">java --version</span><br></pre></td></tr></table></figure>

<img src="/../images-static/202208100022284.png" alt="image-20220530120355674" style="zoom:75%;" />

<h5 id="2、OracleJDK"><a href="#2、OracleJDK" class="headerlink" title="2、OracleJDK"></a>2、OracleJDK</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载oracle-jdk-1.8</span></span><br><span class="line">wget https://120-195-166-66.d.123pan.cn:30443/123-794/1b81dd07/1661483-0/1b81dd078f19e60365757c56a58ca71a\?v\=1\&amp;t\=1653878904\&amp;s\=911675691551fa6fc2bafc8ee6b3614d\&amp;filename\=jdk-8u331-linux-x64.tar.gz\&amp;d\=5e41af74 -O oraclejdk-8.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载oracle-jdk-11</span></span><br><span class="line">wget https://36-156-71-22.d.123pan.cn:30443/123-226/31827360/1661483-0/31827360e0811206c1725b5d4a37d8e2\?v\=1\&amp;t\=1653878806\&amp;s\=c2fe637b3fb235a6cb53c346de2b2f49\&amp;filename\=jdk-11.0.15_linux-x64_bin.deb\&amp;d\=9836dae9 -O oraclejdk-11.deb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装 oraclejdk-11.deb</span></span><br><span class="line">sudo dpkg -i oraclejdk-11.deb</span><br><span class="line">cd /usr/lib/jvm/jdk-11/bin</span><br><span class="line">./java --version</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 oracle-jdk-1.8</span></span><br><span class="line">cd ~</span><br><span class="line">extract oraclejdk-8.tar.gz</span><br><span class="line">mv ~/jdk1.8.0_331 /usr/lib/jvm</span><br><span class="line">cd /usr/lib/jvm/jdk1.8.0_331/bin</span><br><span class="line">./java -version</span><br></pre></td></tr></table></figure>

<h5 id="3、JDK版本自由切换"><a href="#3、JDK版本自由切换" class="headerlink" title="3、JDK版本自由切换"></a>3、JDK版本自由切换</h5><ul>
<li>上诉四个版本安装完成之后，系统默认jdk版本是安装的第一个版本</li>
</ul>
<img src="/../images-static/202208100022847.png" alt="image-20220530121705131" style="zoom:80%;" />

<ul>
<li><pre><code class="shell">  vim ~/.zshrc
  
  # &gt;&gt;&gt;&gt;&gt;&gt; jdk version change &gt;&gt;&gt;&gt;&gt;&gt;&gt;
  export PATH=&quot;/usr/lib/jvm/java-11-openjdk-amd64/bin:$PATH&quot;
  # &gt;&gt;&gt;&gt;&gt;&gt; jdk version change end &gt;&gt;&gt;&gt;&gt;&gt;&gt;
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 实际上，除了修改`.zshrc`文件外，还存在另一种方式，使用` update-alternatives`，这本来就是设计为了在单系统中提供多版本环境配置的一个解决方案。</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk-11/bin/java 300</span><br><span class="line">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_331/bin/java 200</span><br><span class="line">#切换jdk版本</span><br><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>为了方便起见，优先选择第一种解决方案，第一种方案是直接把下面的命令都导入全局了，而第二种方案只是设置了一个java命令，虽然看上去切换更智能了，但是其他bin目录下的其他命令都未进行设置，也就是全局环境是是找不到其他命令的。</p>
</li>
</ul>
<img src="/../images-static/202208100022147.png" alt="image-20220530122531601" style="zoom:80%;" />

<ul>
<li>注意在使用IDEA连接WSL的JAVA环境时，需要保证防火墙对IDEA开放</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行以下命令以允许使用 WSL 进行连接：</span></span><br><span class="line">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound  -InterfaceAlias &quot;vEthernet (WSL)&quot;  -Action Allow</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后执行以下命令以续订防火墙规则</span></span><br><span class="line">Get-NetFirewallProfile -Name Public | Get-NetFirewallRule | where DisplayName -ILike &quot;IntelliJ IDEA*&quot; | Disable-NetFirewallRule</span><br></pre></td></tr></table></figure>

<img src="/../images-static/202208100029538.png" alt="image-20220601015814509" style="zoom:100%;" />
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL安装Minicoda</title>
    <url>/2022/08/15/WSL%E5%AE%89%E8%A3%85Minicoda/</url>
    <content><![CDATA[<h3 id="Anaconda常用命令"><a href="#Anaconda常用命令" class="headerlink" title="Anaconda常用命令"></a>Anaconda常用命令</h3><ul>
<li>查看安装了哪些包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前创建的虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda env list </span><br><span class="line">conda info -e</span><br></pre></td></tr></table></figure>

<ul>
<li>更新当前<code>conda</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda update conda</span><br></pre></td></tr></table></figure>

<ul>
<li>创建虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda create -n your_env_name python=x.x</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如创建python3.7版本的虚拟环境</span></span><br><span class="line">conda create -n env_py37 python=3.7</span><br></pre></td></tr></table></figure>

<blockquote>
<p>anaconda命令创建python版本为x.x，名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。</p>
</blockquote>
<ul>
<li>激活或者切换虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">activate your_env_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果上面的指令没有起作用，则用 :</span></span><br><span class="line">conda activate your_env_name</span><br></pre></td></tr></table></figure>

<img src="/../images-static/202208100020477.png" alt="image-20220529180620420" style="zoom:70%;" />

<ul>
<li>退出当前虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate env_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果不起作用，采用指令：</span></span><br><span class="line">conda deactivate</span><br></pre></td></tr></table></figure>

<ul>
<li>删除虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove -n your_env_name --all</span><br></pre></td></tr></table></figure>

<ul>
<li>删除虚拟环境中的某个包</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda remove --name $your_env_name  $package_name </span><br></pre></td></tr></table></figure>

<ul>
<li>为Ananconda设置清华大学镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加清华镜像源</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn</span><br><span class="line"># 设置搜索时显示通道地址，该命令会创建 .condarc文件</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>

<p>如果此途径修改失败，可以参考清华官方指引：<a href="https://mirrors4.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors4.tuna.tsinghua.edu.cn/help/anaconda/</a></p>
<ul>
<li>取消使用清华镜像源，使用默认镜像</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda config --remove-key channels</span><br></pre></td></tr></table></figure>

<ul>
<li>pip 指定下载镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<ul>
<li>创建虚拟环境后，常用包安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda install numpy</span><br><span class="line">conda install pandas</span><br><span class="line">conda install matplotlib</span><br></pre></td></tr></table></figure>



<h3 id="安装Miniconda"><a href="#安装Miniconda" class="headerlink" title="安装Miniconda"></a>安装<code>Miniconda</code></h3><ul>
<li>下载<code>Miniconda </code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里下载的Miniconda版本对应的是python3.7</span> </span><br><span class="line">wget -c https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh -O Miniconda-py37.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Miniconda官网：https://conda.io/miniconda.html</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>Miniconda</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予Miniconda运行权限</span></span><br><span class="line">sudo chmod u+x  Miniconda-py37.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行</span></span><br><span class="line">bash Miniconda-py37.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>这里需要注意的是，如果是一个全新干净的系统，安装过程中可以一路默认安装，如果已经安装其它依赖原生系统python的版本，最后在询问是否将<code>conda</code>加入环境变量的时候最好选择no，以避免导致未知的错误。【可以参考的错误经历：<a href="https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247486380&idx=1&sn=9329fcd0a60ac5488607d359d6c28134&chksm=9b484b17ac3fc20153d25cbdefe5017c7aa9080d13b5473a05f79808244e848b0a45d2a6a735&scene=21#wechat_redirect">Anaconda is a snake</a>】</li>
</ul>
<img src="/../images-static/202208100022793.png" alt="image-20220528000612498" style="zoom:80%;" />

<h5 id="1、默认安装过程"><a href="#1、默认安装过程" class="headerlink" title="1、默认安装过程"></a>1、默认安装过程</h5><ul>
<li>安装完成之后进入<code>Minicodna</code>安装目录，可以看到<code>python</code>和<code>python3</code>已经指向 Miniconda的python版本</li>
</ul>
<img src="/../images-static/202208100022249.png" alt="image-20220528002757055" style="zoom:80%;" />

<ul>
<li><p>在通过默认安装结束之后，在命令行中会出现一个 <code>（base）XXXXX</code> 的形式，此时可以通过键入 <code>conda deactivate</code> 退出conda的base模式，但是这样做下次启动时还是会出现<code>（base）XXXXX</code> ，而且python链接重新指向了系统内置版本，很明显治标不治本。</p>
</li>
<li><p>在conda官方文档中【<a href="https://conda.io/projects/conda/en/latest/user-guide/configuration/use-condarc.html#change-command-prompt-changeps1">conda官方手册</a>】有这样的描述</p>
<blockquote>
<p>When using conda activate, change the command prompt from <code>$PS1</code> to include the activated environment. The default is True.</p>
<blockquote>
<p>EXAMPLE:<br><code>changeps1: False</code></p>
</blockquote>
</blockquote>
</li>
</ul>
<p>所以只需要在<code>.condarc</code> 文件中，加入 <code> changeps1: False</code> ，即可消除<code>(base)</code>字样，同时python链接指向变为Miniconda的版本。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim ~/.condarc</span><br></pre></td></tr></table></figure>

<img src="/../images-static/202208100022964.png" alt="image-20220528001615084" style="zoom:80%;" />

<h5 id="2、不将conda默认添加进系统环境"><a href="#2、不将conda默认添加进系统环境" class="headerlink" title="2、不将conda默认添加进系统环境"></a>2、不将<code>conda</code>默认添加进系统环境</h5><ul>
<li><p>参考教程 【<a href="https://www.jianshu.com/p/edaa744ea47d">conda 安装教程</a>】</p>
</li>
<li><p>此时在命令行中键入 <code>conda</code> 是没有任何反应的。此时需要在<code>Miniconda</code>安装目录下，赋予<code>activate</code>，启动权限。<code>Miniconda</code>默认安装路径为 <code>/home/user_name/miniconda3/bin</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">赋予所有用户运行权限</span></span><br><span class="line">sudo chmod a+x activate</span><br></pre></td></tr></table></figure>

<img src="/../images-static/202208100022335.png" alt="image-20220528002650110" style="zoom:80%;" />

<ul>
<li>启动<code>conda</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ./activate</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">. ./activate 也是可以的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这时命令行前面出现<code>(base)</code>的时候说明现在已经在<code>conda</code>的环境中了。这时候输入<code>conda list</code> 命令就有反应了</li>
</ul>
<img src="/../images-static/202208100022711.png" alt="image-20220528002622456" style="zoom:80%;" />
]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>Miniconda</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建博客</title>
    <url>/2022/08/12/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>hexo是基于node框架，所以需要首先安装node</p>
<p>同时由于博客是部署在Github-Page，所以还需要安装git</p>
</blockquote>
<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><ul>
<li><p>通过官网直接下载<code>LTS</code>长期支持版本  <a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p>
</li>
<li><p>安装，直接一路默认即可，注意最好更改默认安装路径到非系统盘，避免后续产生读写权限问题</p>
</li>
<li><p>查看node 和npm版本号，验证环境变量是否添加成功</p>
</li>
</ul>
<img src="/../images-static/202208100018697.png" alt="image-20211211135039275" style="zoom:80%;" />

<ul>
<li><p>为节省系统盘空间，更改默认<code>node_cache</code>，以及<code>node_global</code>的位置，在非系统盘创建，<code>node_cache</code>，以及<code>node_global</code>，并在<code>node_global</code>目录下新建<code>node_moudles</code></p>
</li>
<li><p>打开<code>Terminal</code>，键入如下命令</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;创建的node_global文件夹所在路径&quot;</span><br><span class="line">npm config set cache &quot;创建的node_cache文件夹所在路径&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在系统变量中，新建，变量名：<code>NODE_PATH </code>变量值：<code>node_global</code>文件夹下的<code>node_modules</code>文件夹。如：<code>E:\software\nodejs\node_global\node_modules</code></p>
</li>
<li><p>修改用户变量中的Path变量，将默认的npm路径修改为新建的<code>node_global</code>路径，其中默认的 npm路径一般为<code>C/User/用户名/Appdata/Romaing/npm</code></p>
</li>
</ul>
<img src="/../images-static/202208100018609.png" alt="image-20211211134619349" style="zoom:70%;" />

<ul>
<li><p>修改 npm默认源为淘宝镜像源      <a href="https://npmmirror.com/">中国 NPM 镜像 (npmmirror.com)</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Treminal中输入 <code>npm config list</code>，验证镜像源是否配置成功</p>
  <img src="/../images-static/202208100019735.png" alt="image-20211211135615943" style="zoom:75%;" /></li>
</ul>
<h3 id="git安装与配置"><a href="#git安装与配置" class="headerlink" title="git安装与配置"></a>git安装与配置</h3><ul>
<li><p>下载地址 <a href="https://git-scm.com/download/win">Git for Windows</a></p>
</li>
<li><p>一路默认安装即可</p>
</li>
<li><p>打开Windows Terminal，键入 <code>git --version</code>，如下图所示则安装成功</p>
<p>  <img src="/../images-static/image-20220815134714787.png" alt="image-20220815134714787"></p>
</li>
<li><p>关联github账户</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email 你的github账户的邮箱地址</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#####################验证配置###############################</span></span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成公钥，键入以下命令，一路回车即可</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成的公钥默认地址为 <code>C:\Users\Windows用户名\.ssh</code></p>
  <img src="/../images-static/image-20220815135527583.png" alt="image-20220815135527583" style="zoom:80%;" />
</li>
<li><p>如上图所示，打开<code>id_rsa.pub</code>，复制其中的密钥，<code>打开 github官网 --&gt; 点击个人头像 --&gt; Settings --&gt; SSH and GPG keys --&gt; New SSH key</code>。</p>
</li>
<li><p>新建仓库  <code>点击右上角的+号 --&gt; new repository</code></p>
  <img src="/../images-static/image-20220815142937768.png" alt="image-20220815142937768" style="zoom:70%;" /></li>
</ul>
<h3 id="使用hexo框架"><a href="#使用hexo框架" class="headerlink" title="使用hexo框架"></a>使用hexo框架</h3><h4 id="hexo框架的使用"><a href="#hexo框架的使用" class="headerlink" title="hexo框架的使用"></a>hexo框架的使用</h4><ul>
<li><p>打开Windows Terminal或 CMD命令窗口</p>
</li>
<li><p>输入以下命令全局安装hexo</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<ul>
<li>验证hexo是否安装成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<ul>
<li>创建本地空文件夹 存放博客文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir my-blog</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化博客</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#########首先进入博客文件夹========</span></span></span><br><span class="line">cd my-blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<ul>
<li><p>打开 <code>my-blog\_config.yml</code>文件，修改为如下内容</p>
  <img src="/../images-static/image-20220815143248358.png" alt="image-20220815143248358" style="zoom:70%;" />

  <img src="/../images-static/image-20220815143423108.png" alt="image-20220815143423108" style="zoom:80%;" />
</li>
<li><p>安装git部署插件</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save </span><br></pre></td></tr></table></figure>

<ul>
<li>生成博客</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<ul>
<li>本地预览博客</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<img src="/../images-static/image-20220815140951766.png" alt="image-20220815140951766" style="zoom:70%;" />

<p>如上图所示，在浏览器中访问 <code>http://localhost:4000/</code>即可看到预览效果</p>
<ul>
<li>部署博客到github，键入以下命令，然后访问<code>your-username.github.io</code>即可</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>



<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><ul>
<li><p>可以使用<code>github+Picgo</code>作为图床，但是本地访问的时候存在概率性未加载问题。</p>
</li>
<li><p>使用阿里云<code>OSS+Picgo</code>搭建图床，收费稳定，但是可能存在被恶意盗刷的风险。</p>
</li>
<li><p>我这里直接使用相对地址引用，本地浏览很方便，在部署到Github后跟使用<code>github+Picgo</code>作为图床效果一样。</p>
</li>
<li><p>打开<code>my-blog\scaffolds\post.md</code>文件，键入如下内容：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br><span class="line">typora-root-url: /</span><br></pre></td></tr></table></figure>
</li>
<li><p>打开Typora，<code>文件 --&gt; 偏好设置 --&gt; 图像 --&gt; 插入图像时</code>,修改为如下内容:</p>
  <img src="/../images-static/image-20220815142259375.png" alt="image-20220815142259375" style="zoom:65%;" />
</li>
<li><p>每次用typora写博客时，要保证<code>typora-root-url: /</code>参数是存在的，否则会导致找不到正确的图片路径而无法正常加载。</p>
</li>
</ul>
<h4 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h4><ul>
<li><p>个人推荐 <code>Chic</code>主题，该主题十分简洁。</p>
</li>
<li><p>主题参考文档 <a href="https://github.com/Siricee/hexo-theme-Chic/blob/master/README-CN.md">Hexo-theme-Chic</a></p>
</li>
<li><p>修改主题默认文字，推荐<a href="https://download.jetbrains.com/fonts/JetBrainsMono-2.242.zip">Jetbrains Moon</a>和 <a href="https://communityfile-drcn.op.hicloud.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20220527115222.36009086555928047609106823953760:50530526070936:2800:E1CA794341643D6B6FFE8F1EE2DBB96B786975D088FDA18348E89FEC28135686.zip?needInitFileName=true">HarmonyOS Sans</a>。将下载好的字体复制到<code>themes\Chic\source\fonts\lanting</code>文件夹下，修改主题配置文件<code>themes\Chic\source\css\font.styl</code>,如下所示：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@font-face</span><br><span class="line">  font-family &#x27;lanting&#x27;</span><br><span class="line">  src: url(&#x27;../fonts/lanting/lanting.eot&#x27;); /* IE9 */</span><br><span class="line">  src: url(&#x27;../fonts/lanting/lanting.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), /* IE6-IE8 */ </span><br><span class="line">       url(&#x27;../fonts/lanting/lanting.woff2&#x27;) format(&#x27;woff2&#x27;),</span><br><span class="line">          url(&#x27;../fonts/lanting/lanting.woff&#x27;) format(&#x27;woff&#x27;),</span><br><span class="line">          url(&#x27;../fonts/lanting/JetBrainsMono-Light.ttf&#x27;) format(&#x27;truetype&#x27;),</span><br><span class="line">          url(&#x27;../fonts/lanting/HarmonyOS_Sans_Medium.ttf&#x27;) format(&#x27;truetype&#x27;); </span><br><span class="line">          /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span><br><span class="line">  font-weight 430</span><br><span class="line">  font-display swap</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">font-family = <span class="string">&#x27;JetBrains Mono Light&#x27;</span>,<span class="string">&#x27;HarmonyOS Sans Regular&#x27;</span>,Lantinghei SC, <span class="string">&#x27;lanting&#x27;</span>, PingFang SC, Seguo UI, Microsoft Yahei, Arial</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基本操作</title>
    <url>/2022/08/13/redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="NoSQL："><a href="#NoSQL：" class="headerlink" title="NoSQL："></a>NoSQL：</h3><p>NoSQL 表示为“非关系SQL”，不支持多表查询，没有表和关系的概念，主要在内存中操作&lt;效率更高&gt;。</p>
<h3 id="Redis："><a href="#Redis：" class="headerlink" title="Redis："></a>Redis：</h3><p>redis 是一个免费开源的NoSQL产品，使用 ANSI C 语言编写，是一个 key-value 存储系统。支持的存储的 value包括&lt;string,hash,list,set,zset(sorted-set&#x3D;&#x3D;有序集合)&gt;。</p>
<p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件中。</p>
<h3 id="1、Redis基本操作"><a href="#1、Redis基本操作" class="headerlink" title="1、Redis基本操作"></a>1、Redis基本操作</h3><h4 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure>

<h4 id="启动客户端"><a href="#启动客户端" class="headerlink" title="启动客户端"></a>启动客户端</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h4 id="启动支持中文的客户端"><a href="#启动支持中文的客户端" class="headerlink" title="启动支持中文的客户端"></a>启动支持中文的客户端</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">redis-cli <span class="attr">--raw</span></span><br></pre></td></tr></table></figure>

<h4 id="运行测试命令"><a href="#运行测试命令" class="headerlink" title="运行测试命令"></a>运行测试命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><ul>
<li><p>数据库本身没有名称，默认16个，通过0-15来标识，例如选中编号为1的数据库：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>redis在初始化时，默认选择0号数据库</p>
</li>
</ul>
<h4 id="redis键值对说明"><a href="#redis键值对说明" class="headerlink" title="redis键值对说明"></a>redis键值对说明</h4><ul>
<li>redis 是 key-value 的数据结构</li>
<li>每条数据都是一个键值对</li>
<li>键的类型是字符串</li>
<li>值的类型分为五种：字符串-string，哈希-hash，列表-list，无序集合-set，有序集合-zset</li>
</ul>
<h4 id="redis基本操作"><a href="#redis基本操作" class="headerlink" title="redis基本操作"></a>redis基本操作</h4><ul>
<li><p>如果设置的键不存在则为添加、如果已经存在则为修改</p>
</li>
<li><p>redis 中字符串可以使用单引号或者双引号，也可以省略引号</p>
</li>
<li><p>设置键值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置键值以及过期时间</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key senconds value </span><br></pre></td></tr></table></figure>
</li>
<li><p>设置多个键值对</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mset key1 vlaue1 key2 value2...........</span><br></pre></td></tr></table></figure>
</li>
<li><p>追加值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append key value</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取单个值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="keyword">key</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取多个值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mget key1 key2 ............</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除键以及其对应值</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del key1 key2 ..........</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="键命令"><a href="#键命令" class="headerlink" title="键命令"></a>键命令</h4><ol>
<li><p>查找键</p>
<ul>
<li><p>参数支持正则表达式，找到键，返回键名，找不到返回空</p>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">keys</span> pattern</span><br><span class="line">======================</span><br><span class="line">例如：</span><br><span class="line"><span class="number">1</span>.查找所有键  <span class="keyword">keys</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="number">2</span>.查找包含s的键  <span class="keyword">keys</span> <span class="string">&quot;*s*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p> 2.判断键是否存在</p>
 <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exists</span> key &lt;返回<span class="number">1</span>表示存在&gt;</span><br></pre></td></tr></table></figure>

<p> 3.查看键对应的 value 类型</p>
 <figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">type</span> key</span></span><br></pre></td></tr></table></figure>

<p> 4.设置键过期的单位</p>
<ul>
<li><p>以秒为单位</p>
</li>
<li><p>如果没有指定的国企时间则一直存在 直到通过del 移除</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 5.查看键有效时间</p>
<ul>
<li><p>以秒为单位</p>
<ul>
<li>返回大于0，代表有效时间，单位：秒</li>
<li>返回-1，表示永久有效</li>
<li>返回-2，表示键不存在</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">ttl <span class="keyword">key</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="2、哈希"><a href="#2、哈希" class="headerlink" title="2、哈希"></a>2、哈希</h3><h5 id="hash介绍"><a href="#hash介绍" class="headerlink" title="hash介绍"></a>hash介绍</h5><ul>
<li>hash用于存储“键值对”集合</li>
<li>hash中的值的类型为string</li>
<li>同一个哈希中字段名不可重复</li>
</ul>
<img src="/../images-static/202208132238348-16605345031497.png" alt="图片名称" style="zoom:80%;" />

<h5 id="增加、删除"><a href="#增加、删除" class="headerlink" title="增加、删除"></a>增加、删除</h5><ul>
<li><p>设置单个字段</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset key field value --- 其中&lt;field value&gt; 对应哈希表中的&lt;key value&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置多个字段</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hmset <span class="keyword">key</span> filed1 value1 field2 value2 ......</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取指定键所有的字段</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hkeys <span class="keyword">key</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取一个字段的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hget <span class="keyword">key</span> field</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取多个字段的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hmget <span class="keyword">key</span> field1 field2</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有字段的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hvals <span class="keyword">key</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取所有字段名包括字段对应的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hgetall <span class="keyword">key</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul>
<li><p>删除hash中的指定字段</p>
<ul>
<li>字段对应的值会一起被删除</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hdel <span class="keyword">key</span> field1 field2..........</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除整个hash键以及字段和值，使用del命令</p>
  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">del</span> key1 key2..........</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3、列表List"><a href="#3、列表List" class="headerlink" title="3、列表List"></a>3、列表List</h4><h5 id="list介绍"><a href="#list介绍" class="headerlink" title="list介绍"></a>list介绍</h5><ul>
<li>列表中的值类型为字符串</li>
<li>列表中的每个值按照添加顺序排序</li>
</ul>
<p><img src="/../images-static/202208132238207-16605345057769.png" alt="图片名称"></p>
<h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><ul>
<li><p>从左侧插入值&lt;头插&gt;</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">lpush <span class="keyword">key</span> value1 value2</span><br></pre></td></tr></table></figure>
</li>
<li><p>从右侧插入值&lt;尾插&gt;</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">rpush <span class="keyword">key</span> value1 value2</span><br></pre></td></tr></table></figure>
</li>
<li><p>在指定值的前或者后插入值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">linsert <span class="keyword">key</span> before/after value <span class="built_in">new</span>-value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul>
<li><p>返回列表中指定范围内的值</p>
<ul>
<li>索引从左侧开始，第一个值的索引为0</li>
<li>索引可以为负数，表示从尾部开始计数，如：-1表示最后一个值</li>
<li>start，stop为所要获取值的索引</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">lrange <span class="keyword">key</span> start <span class="keyword">stop</span> &lt;start <span class="keyword">stop</span>认为是闭包含的范围&gt; </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul>
<li><p>设置指定索引的值</p>
<ul>
<li>索引从左侧开始，第一个值的索引为0</li>
<li>索引可以是负数，表示从尾部开始，-1代表最后一个值</li>
</ul>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">lset key <span class="keyword">index</span> value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><ul>
<li><p>删除指定的值</p>
<ul>
<li>将列表中前 count 次出现的值移除</li>
<li>count &gt; 0：从头往尾删除</li>
<li>count &lt; 0：从尾往头删除</li>
<li>count &#x3D; 0：删除所有值</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">lrem <span class="keyword">key</span> count value</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4、无序集合-set"><a href="#4、无序集合-set" class="headerlink" title="4、无序集合 set"></a>4、无序集合 set</h3><h4 id="set介绍"><a href="#set介绍" class="headerlink" title="set介绍"></a>set介绍</h4><ul>
<li>无序集合中值类型为字符串</li>
<li>集合中不允许有重复的值</li>
<li>对于集合中的值，只能添加和删除，不能修改</li>
</ul>
<h4 id="增加-1"><a href="#增加-1" class="headerlink" title="增加"></a>增加</h4><ul>
<li><p>集合中添加值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">sadd <span class="keyword">key</span> value1 value2.........</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取-1"><a href="#获取-1" class="headerlink" title="获取"></a>获取</h4><ul>
<li><p>返回所有值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">smembers <span class="keyword">key</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h4><ul>
<li><p>删除指定的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">srem <span class="keyword">key</span> value</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5、有序集合zset"><a href="#5、有序集合zset" class="headerlink" title="5、有序集合zset"></a>5、有序集合zset</h3><h4 id="zset介绍"><a href="#zset介绍" class="headerlink" title="zset介绍"></a>zset介绍</h4><ul>
<li>有序集合中的值类型为字符串</li>
<li>集合中不允许有重复的值</li>
<li>每个值都会关联一个分数，分数可以为附属，通过分数将值从小到大排序</li>
<li>对于集合中的值，只能添加和删除，不能修改</li>
</ul>
<p><img src="/../images-static/202208132238846-166053450862511.png" alt="图片名称"></p>
<h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul>
<li><p>添加值</p>
  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">zadd key <span class="keyword">score1 </span>value1 <span class="keyword">score2 </span>value2</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="获取-2"><a href="#获取-2" class="headerlink" title="获取"></a>获取</h4><ul>
<li><p>返回指定范围内的值</p>
<ul>
<li>start，stop为值的下标索引</li>
<li>第一个值的索引为0</li>
<li>索引可以为负数，表示从尾部开始计数，-1表示最后一个值</li>
<li>withscores：同时获取值对应的分数(score)</li>
</ul>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">zrange <span class="keyword">key</span> start <span class="keyword">stop</span>[withscores]</span><br></pre></td></tr></table></figure>
</li>
<li><p>返回分数(score)在 min 和 max 之间的值</p>
  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zrangebyscore key <span class="built_in">min</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值 value 的分数(score)</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">zscore <span class="keyword">key</span> value</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h4><ul>
<li><p>删除指定的值</p>
  <figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">zrem <span class="keyword">key</span> value1 value2........</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除分数(score)在指定范围之间的值</p>
  <figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zremrangebyscore key <span class="built_in">min</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>网络工程师备考</title>
    <url>/2022/08/13/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A4%87%E8%80%83/</url>
    <content><![CDATA[<h3 id="考试目的"><a href="#考试目的" class="headerlink" title="考试目的"></a>考试目的</h3><p>今天突然发现2021年上半年的网络工程师及格线出来了，还是跟原来一样，45分就算及格。</p>
<img src="/../images-static/202208132245932-16605344533851.png" alt="img" style="zoom:80%;" />

<p>我这上午考了47分，下午考了54分，也算是通过了网络工程师考试了。而我参加这个网络工程师考试只是为了我能在保研的时候能加分，一个看起来有点功利的目的。</p>
<p>这篇博客算是一个总结，希望可以给其他想要参加考试的人一个小小的参考。</p>
<hr>
<h3 id="考试形式"><a href="#考试形式" class="headerlink" title="考试形式"></a>考试形式</h3><p> 在网络工程师考试中，分为<strong>上午考试</strong>和<strong>下午考试</strong>，两场考试需要都通过才算是合格。</p>
<p> 在上午的考试中，全部都是单项选择题，每个选择题分值是1分，总分75分，答对60%就可以获得45分。在单项选择中，最后5道题是英文题，一般都是与某个计算机网络的具体概念有关，比如说VPN，IPv6，IPv4，MAC等等，这就要求你需要知道一些中文概念或者短语对应的英文。这5道题一般都不难，可以通过上下文判断。</p>
<p> 在下午的考试中，主要内容是网络系统设计与管理，也就是规划设计题和交换机或者路由器的配置问题。在2021年上半年的考试中，绝大部分都是给了备选项的，就类似于一个大题挖出来10个空，然后给你12个备选项，让你选择。不过也有一部分的题目，没有给出备选项，就是一个单纯的填空题或者问答题，这就要看你平时的知识积累了。整体难度不是很大。这个题目分布就不规律了，不过同样是总分75分，拿到60%就可以获得45分。</p>
<blockquote>
<p>无论是上午考试还是下午考试，都是150分钟。</p>
</blockquote>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p> 在上午的考试中需要填答题卡，所以就需要你自备</p>
<p> 1.一支2B铅笔用来涂卡</p>
<p> 2.橡皮擦</p>
<p> 3.黑色圆珠笔(我当时用的是0.5mm的，我记得对于粗细没有规定)。</p>
<p> 4.个人准考证(黑白即可，不需要彩印)</p>
<p> 5.个人身份证。</p>
<p> 因为我当时参加考试时全国部分地区还有新冠病例，所以还要求有:</p>
<p> 6.健康码(绿码)</p>
<p> 7.个人行程码</p>
<p> 8.如果你来自于中风险地区，需要核酸检测阴性证明。</p>
<h3 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h3><p> 1.参考书籍官网都给出了，这里我挂个官网链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.ruankao.org.cn/book/lists</span><br></pre></td></tr></table></figure>

<p> 这里我给出我当时收集到的网络工程师教程(第五版)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1zkznQk_bm9L6yNmWBwGikg 提取码：1234 </span><br></pre></td></tr></table></figure>

<p>如果你把这本书作为参考的话，就需要提前2-3个月准备，因为这本书真的很厚，而且知识点很多，你除了需要理解之外还需要背诵。当你把这本书融汇贯通之后，上午的考试肯定可以拿到高分，不过对于临时抱佛脚，想要突击几天的人不合适。</p>
<p> 2.我用的书：</p>
<p> 2-1.参考书是：朱小平老师出的《网络工程师5天修炼》</p>
<p> 2-2.习题是：朱小平老师的《网络工程师考前冲刺100题》(第二版)，《网络工程师真题精讲与押题密卷》</p>
<p>我这不是打广告(手动狗头)，因为市面上你能找到的关于网络工程师而且销量高的就这几本，还有一个就是希赛的，但是人家的书是跟视频课绑定的，他这个视频课需要好几千，对于在校生来说不是首选项。</p>
<p>2-3.还有一本书是：谢希仁老师的《计算机网络(第7版)》。</p>
<blockquote>
<p>其中谢希仁老师的书可以在看朱小平老师的书之前大致浏览一遍，因为刚学过计算机网络这时候再复习一遍，知识点会更加牢固。不过这本书不适合作为全程的复习参考书，这个只是一个开胃菜，作为强化计算机网路知识的一个方式。重点还是朱小平老师的《网络工程师5天修炼》，这本书包含的考点更多，也更像是一本为了考试而准备的知识点大全，所以对于这本书既要理解也要背诵。学完每一章之后，就可以按照自己的习惯去做对应的《考前冲刺100题》对应习题了。这个100题的题量很小，不过能起到一个查漏补缺和知识点拓展补充的作用。所以重点还是相应知识点的理解和记忆。</p>
</blockquote>
<p>对于《网络工程师真题精讲与押题密卷》这本书，就是几套真题和模拟题，其中2021年的书的目录是这样的：</p>
<img src="/../images-static/202208132248407-16605344575133.png" alt="在这里插入图片描述" style="zoom:80%;" />

<p>这几套题可以用来练手，我当时是在5天修炼以及100题都看完做完之后才开始的，一天一套，刚好考前做完。当然如果时间充裕的话还可以做一做2018年以前的选择题和部分规划题。其中2018年开始采用新的考纲，主要是不再使用和考察思科的命令，而改用和考察华为的命令，以及部分知识点的调整。下面给出我当时收集到的2018年以后真题及参考答案：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1UBY-OohgMB0nqcRujXk6xg 提取码：1234 </span><br></pre></td></tr></table></figure>



<h3 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h3><p>1.现在网上(B站)比较流行的视频有大涛的和希赛教育的。其中大涛的是2018年版的似乎，而希赛在B站有官方账号，会免费分享一些学年的视频。如下图，这里第一个就是希赛官方分享的视频，第二个是大涛的2018年的教学视频。（这里第二个虽然注明了2019年最新，但是你点开之后还是2018年视频。）</p>
<img src="/../images-static/202208132249904-16605344600625.png" alt="在这里插入图片描述" style="zoom:80%;" />

<p>2.我当时看的也是希赛的视频，是2018版的，不过不是上图的男老师，是一个女老师，具体链接如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1EV411U7QX?from=search&amp;seid=12371943451293901882</span><br></pre></td></tr></table></figure>

<p>在看这个视频的时候可以结合朱小平老师的5天修炼，做一下笔记。我当时是先把视频刷完，熟悉一下知识点，然后才开始看的5天修炼。这里给出我当时做的笔记供大家参考(最好还是自己看的时候做一下笔记)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1PAaO-3Ch0sYHchQO6-Ndow 提取码：1234 </span><br></pre></td></tr></table></figure>

<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><ol>
<li>视频还是推荐希赛的，大涛的我当时也听了，说实话我不喜欢。具体你可以都听听试一下，看你喜欢哪个。</li>
<li>因为考试是面向全社会的，跟你坐在同一个考场的只有一小部分是学生，大部分都是步入社会的成年人。他们有可能会作弊，但是你不要作弊，你就好好学，然后去考试，一定可以过的。虽然监考老师对于作弊的人不会怎么样，但是如果巡考发现就会直接取消你的考试资格，似乎信用上也会给你记一笔。最重要的还是放平心态。</li>
<li>最后，我当时参加的是河南省的考试，考点就两个一个是郑州，一个是新乡，其中我当时的考点的是新乡的新乡学院。</li>
<li>有其他问题可以评论或者私信。我看到就会回复的。加油！</li>
</ol>
]]></content>
      <categories>
        <category>软考</category>
      </categories>
      <tags>
        <tag>软考</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh配置与安装</title>
    <url>/2022/08/15/zsh%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="1·安装ZSH"><a href="#1·安装ZSH" class="headerlink" title="1·安装ZSH"></a>1·安装ZSH</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br><span class="line">sudo apt install git</span><br><span class="line">chsh -s /usr/bin/zsh</span><br><span class="line">sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里如果提示连接失败进入 oh-my-zsh代码库 (https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh) 复制 install.sh到本地</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后执行 bash ./install.sh</span></span><br><span class="line"></span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在该文件中的插件处 添加 zsh-autosuggestions zsh-syntax-highlighting</span></span><br></pre></td></tr></table></figure>

<img src="/../images-static/202208100021945.png" alt="image-20220530013034557" style="zoom:80%;" />

<h4 id="2·Miniconda配置"><a href="#2·Miniconda配置" class="headerlink" title="2·Miniconda配置"></a>2·Miniconda配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">#########文件添加如下：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">!! Contents within this block are managed by <span class="string">&#x27;conda init&#x27;</span> !!</span></span><br><span class="line">__conda_setup=&quot;$(&#x27;/home/z/miniconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    eval &quot;$__conda_setup&quot;</span><br><span class="line">else</span><br><span class="line">    if [ -f &quot;/home/z/miniconda3/etc/profile.d/conda.sh&quot; ]; then</span><br><span class="line">        . &quot;/home/z/miniconda3/etc/profile.d/conda.sh&quot;</span><br><span class="line">    else</span><br><span class="line">        export PATH=&quot;/home/z/miniconda3/bin:$PATH&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">unset __conda_setup</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; <span class="string">conda initialize &lt;&lt;&lt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3·未安装包提示"><a href="#3·未安装包提示" class="headerlink" title="3·未安装包提示"></a>3·未安装包提示</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install command-not-found</span><br><span class="line"></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">##########文件添加如下：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt;&gt; get zsh_command_not_found info &gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">. /etc/zsh_command_not_found</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"></span><br><span class="line">source ~/.zshrc</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4·显示全文件目录"><a href="#4·显示全文件目录" class="headerlink" title="4·显示全文件目录"></a>4·显示全文件目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/themes</span><br><span class="line">vim robbyrussell.zsh-theme</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将第二行修改为 PROMPT+=<span class="string">&#x27; %&#123;$fg[cyan]%&#125;[$PWD]%&#123;$reset_color%&#125; $(git_prompt_info)&#x27;</span></span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h4 id="5·JDK配置"><a href="#5·JDK配置" class="headerlink" title="5·JDK配置"></a>5·JDK配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; jdk version change &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line">export PATH=&quot;/usr/lib/jvm/java-11-openjdk-amd64/bin:$PATH&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; jdk version change end &gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改完毕之后 运行一下命令</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
</search>
